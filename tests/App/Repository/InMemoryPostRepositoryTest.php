<?php

namespace Tests\App\Repository;

use App\Entity\Post;
use App\Repository\InMemoryPostRepository;
use Tests\TestCase;

class InMemoryPostRepositoryTest extends TestCase
{
    /** @var InMemoryPostRepository **/
    private InMemoryPostRepository $postRepository;
    private Post $post1;
    private Post $post2;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->post1 = $this->buildPost('1', 'text', '1', 'user 1', '2020-01-01');
        $this->post2 = $this->buildPost('2', 'text', '2', 'user 1', '2020-01-01');

        $this->postRepository = new InMemoryPostRepository([$this->post1, $this->post2]);
    }


    public function testAll()
    {
        $data = $this->postRepository->all();

        self::assertCount(2, $data);
        self::assertEquals([$this->post1, $this->post2], $data);
    }

    /**
     * @throws \Exception
     */
    public function testGetByMonth()
    {
        $data = $this->postRepository->getByMonth('01');
        self::assertCount(2, $data);

        $data = $this->postRepository->getByMonth('02');
        self::assertCount(0, $data);

    }


    /**
     * @throws \Exception
     */
    public function testGetByUserId()
    {
        $data = $this->postRepository->getByUserId('1');
        self::assertCount(1, $data);

        $data = $this->postRepository->getByUserId('2');
        self::assertCount(1, $data);

        $data = $this->postRepository->getByUserId('3');
        self::assertCount(0, $data);
    }


    public function testSave()
    {
        $post3 = $this->buildPost('3', 'text', '3', 'user 3', '2020-01-01');
        $post = $this->postRepository->save($post3);

        self::assertEquals($post, $post3);
        self::assertCount(3, $this->postRepository->all());
    }

    public function testUpdate()
    {
        $post3 = $this->buildPost('3', 'text', '3', 'user 3', '2020-01-01');
        $post = $this->postRepository->save($post3);

        self::assertEquals($post, $post3);
        self::assertCount(3, $this->postRepository->all());

        $post3->text = 'edited_text';
        $post = $this->postRepository->update($post3);

        self::assertEquals($post, $post3);
        self::assertEquals($post->text, 'edited_text');
        self::assertCount(3, $this->postRepository->all());
    }
}
