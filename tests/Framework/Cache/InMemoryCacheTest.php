<?php


namespace Tests\Framework\Cache;


use Framework\Cache\InMemoryCache;
use Tests\TestCase;

class InMemoryCacheTest extends TestCase
{
    /** @var InMemoryCache */
    private InMemoryCache $cache;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->cache = new InMemoryCache();
    }

    public function testSet()
    {
        $this->cache->set('key', 'value');
        self::assertEquals($this->cache->get('key'), 'value');

        $this->cache->set('key', 'value_edited');
        self::assertEquals($this->cache->get('key'), 'value_edited');

    }

    public function testGet()
    {
        $this->cache->set('key2', 'value2');
        self::assertEquals($this->cache->get('key2'), 'value2');
        self::assertNull($this->cache->get('value'));
    }


    public function testDelete()
    {
        $this->cache->set('key2', 'value2');
        self::assertEquals($this->cache->get('key2'), 'value2');
        $this->cache->delete('key2');
        self::assertNull($this->cache->get('key2'));
    }

    public function testFlush()
    {
        $this->cache->set('key', 'value');
        $this->cache->set('key2', 'value2');


        self::assertEquals($this->cache->get('key'), 'value');
        self::assertEquals($this->cache->get('key2'), 'value2');

        $this->cache->flush();

        self::assertNull($this->cache->get('key'));
        self::assertNull($this->cache->get('key2'));
    }

}
